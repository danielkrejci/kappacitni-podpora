// tslint:disable
import * as url from 'url';
import portableFetch from 'portable-fetch';
import { Configuration } from '../configuration';

export const BASE_PATH = process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '';

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration!: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name!: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}


/**
 * ServiceCaseControllerApi - fetch parameter creator
 * @export
 */
export const ServiceCaseControllerApiFetchParamCreator = function(configuration?: Configuration) {
    return {
        /**
         * Send Message to the related ibm mq
         * @summary Send Messages to Ibm Mq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceCase(options: any = {}): FetchArgs {
            const localVarPath = `/service-cases/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceTypes(options: any = {}): FetchArgs {
            const localVarPath = `/service-cases/types`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceCaseControllerApi - functional programming interface
 * @export
 */
export const ServiceCaseControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Send Message to the related ibm mq
         * @summary Send Messages to Ibm Mq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceCase(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ServiceCaseControllerApiFetchParamCreator(configuration).createServiceCase(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceTypes(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ServiceCaseControllerApiFetchParamCreator(configuration).getServiceTypes(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ServiceCaseControllerApi - factory interface
 * @export
 */
export const ServiceCaseControllerApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Send Message to the related ibm mq
         * @summary Send Messages to Ibm Mq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceCase(options?: any) {
            return ServiceCaseControllerApiFp(configuration).createServiceCase(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceTypes(options?: any) {
            return ServiceCaseControllerApiFp(configuration).getServiceTypes(options)(fetch, basePath);
        },
    };
};

/**
 * ServiceCaseControllerApi - object-oriented interface
 * @export
 * @class ServiceCaseControllerApi
 * @extends {BaseAPI}
 */
export class ServiceCaseControllerApi extends BaseAPI {
    /**
     * Send Message to the related ibm mq
     * @summary Send Messages to Ibm Mq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceCaseControllerApi
     */
    public createServiceCase(options?: any) {
        return ServiceCaseControllerApiFp(this.configuration).createServiceCase(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceCaseControllerApi
     */
    public getServiceTypes(options?: any) {
        return ServiceCaseControllerApiFp(this.configuration).getServiceTypes(options)(this.fetch, this.basePath);
    }

}

