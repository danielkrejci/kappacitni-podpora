/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CodableDto,
  CreateServiceCaseDto,
} from '../models';
import {
    CodableDtoFromJSON,
    CodableDtoToJSON,
    CreateServiceCaseDtoFromJSON,
    CreateServiceCaseDtoToJSON,
} from '../models';

export interface CreateServiceCaseRequest {
    createServiceCaseDto: CreateServiceCaseDto;
}

/**
 * 
 */
export class ServiceCaseControllerApi extends runtime.BaseAPI {

    /**
     * Send Message to the related ibm mq
     * Send Messages to Ibm Mq
     */
    async createServiceCaseRaw(requestParameters: CreateServiceCaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.createServiceCaseDto === null || requestParameters.createServiceCaseDto === undefined) {
            throw new runtime.RequiredError('createServiceCaseDto','Required parameter requestParameters.createServiceCaseDto was null or undefined when calling createServiceCase.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/service-cases/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateServiceCaseDtoToJSON(requestParameters.createServiceCaseDto),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Send Message to the related ibm mq
     * Send Messages to Ibm Mq
     */
    async createServiceCase(requestParameters: CreateServiceCaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.createServiceCaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getServiceTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CodableDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/service-cases/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CodableDtoFromJSON));
    }

    /**
     */
    async getServiceTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CodableDto>> {
        const response = await this.getServiceTypesRaw(initOverrides);
        return await response.value();
    }

}
